syntax = "proto3";

package goim.comet;
option go_package = "grpc";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

/*
 * v1.0.0
 * protocol
 */
message Proto {
    int32 ver = 1 [(gogoproto.jsontag) = "ver"];
    int32 op = 2 [(gogoproto.jsontag) = "op"];
    int32 seq = 3 [(gogoproto.jsontag) = "seq"];
    bytes body = 4 [(gogoproto.jsontag) = "body"];
}


// 空结构
message Empty{}

// 推送消息到指定人
message PushMsgReq {
    repeated string keys = 1;
    int32 protoOp = 3;
    Proto proto = 2;
}

message PushMsgReply {}

 
// 广播消息到所有房间所有人 
message BroadcastReq{
    int32 protoOp = 1;
    Proto proto = 2;
    int32 speed = 3;
}

message BroadcastReply{}

 
// 广播消息到指定房间
message BroadcastRoomReq {
    string roomID = 1;
    Proto proto = 2;
}

message BroadcastRoomReply{}


// 获取所有房间
message RoomsReq{}

message RoomsReply {
    option (gogoproto.goproto_stringer) = false;
    map<string,bool> rooms = 1;
}

service Comet {
    // Ping Service 
    rpc Ping(Empty) returns(Empty); 
    // Close Service 
    rpc Close(Empty) returns(Empty); 
    //PushMsg push by key or mid
    rpc PushMsg(PushMsgReq) returns (PushMsgReply);
    // Broadcast send to every enrity
    rpc Broadcast(BroadcastReq) returns (BroadcastReply);
    // BroadcastRoom broadcast to one room
    rpc BroadcastRoom(BroadcastRoomReq) returns (BroadcastRoomReply);
    // Rooms get all rooms
    rpc Rooms(RoomsReq) returns (RoomsReply);
}
